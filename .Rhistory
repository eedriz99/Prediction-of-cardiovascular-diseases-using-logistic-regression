??vif
#Load all required R packages
library(car)
#library(FactoMineR)
#Import the dataset
heart <- read.csv("~/Eedriz Project/heart.csv")
#Perform the summary statistics
summary(heart)
#Test for auto correlation
# ##Test for multicolinearity
vif(heart)
#Load all required R packages
library(car)
#library(FactoMineR)
#Import the dataset
heart <- read.csv("~/Eedriz Project/heart.csv")
#Perform the summary statistics
summary(heart)
#Test for auto correlation
# ##Test for multicolinearity
car::vif(heart)
#Load all required R packages
library(car)
#library(FactoMineR)
#Import the dataset
heart <- read.csv("~/Eedriz Project/heart.csv")
#Perform the summary statistics
summary(heart)
model = lm(HeartDisease ~ Age + Sex + ChestPainType + RestingBP + Cholesterol + FastinBS + RestingECG + MaxHR + ExerciseAngina + Oldpeak + ST_slope, data)
#Test for auto correlation
# ##Test for multicolinearity
car::vif(heart)
#Load all required R packages
library(car)
#library(FactoMineR)
#Import the dataset
heart <- read.csv("~/Eedriz Project/heart.csv")
#Perform the summary statistics
summary(heart)
model = lm(HeartDisease ~ Age + Sex + ChestPainType + RestingBP + Cholesterol + FastinBS + RestingECG + MaxHR + ExerciseAngina + Oldpeak + ST_slope, heart)
#Test for auto correlation
# ##Test for multicolinearity
car::vif(heart)
source("~/Eedriz Project/eedriz.R")
#Load all required R packages
library(car)
#library(FactoMineR)
#Import the dataset
heart <- read.csv("~/Eedriz Project/heart.csv")
#Perform the summary statistics
summary(heart)
model = lm(HeartDisease ~ Age + Sex + ChestPainType + RestingBP + Cholesterol + FastingBS + RestingECG + MaxHR + ExerciseAngina + Oldpeak + ST_slope, heart)
summary(model)
#Test for auto correlation
# ##Test for multicolinearity
car::vif(model)
source("~/Eedriz Project/eedriz.R")
#Load all required R packages
library(car)
#library(FactoMineR)
#Import the dataset
heart <- read.csv("~/Eedriz Project/heart.csv")
#Perform the summary statistics
summary(heart)
model = lm(HeartDisease ~ Age + Sex + ChestPainType + RestingBP + Cholesterol + FastingBS + RestingECG + MaxHR + ExerciseAngina + Oldpeak + ST_Slope, heart)
summary(model)
#Test for auto correlation
# ##Test for multicolinearity
car::vif(model)
#Load all required R packages
library(car)
#library(FactoMineR)
#Import the dataset
heart <- read.csv("~/Eedriz Project/heart.csv")
#Perform the summary statistics
summary(heart)
model = lm(HeartDisease ~ Age + Sex + ChestPainType + RestingBP + Cholesterol + FastingBS + RestingECG + MaxHR + ExerciseAngina + Oldpeak + ST_Slope, heart)
summary(model)
#Test for auto correlation
# ##Test for multicolinearity
car::vif(model)
source("~/Eedriz Project/eedriz.R")
#Test for auto correlation
durbinWatsonTest(model)
source("~/Eedriz Project/eedriz.R")
source("~/Eedriz Project/eedriz.R")
source("~/Eedriz Project/eedriz.R")
install.packages("FactoMineR")
install.packages("mlr")
.
install.packages("mlr3")
source("~/Eedriz Project/eedriz.R")
#Load all required R packages
library(car)
library(FactoMineR)
library(mlr3)
#Import the dataset
heart <- read.csv("~/Eedriz Project/heart.csv")
#Perform the summary statistics
summary(heart)
#build a linear model
model = lm(HeartDisease ~ Age + Sex + ChestPainType + RestingBP + Cholesterol + FastingBS + RestingECG + MaxHR + ExerciseAngina + Oldpeak + ST_Slope, heart)
summary(model)
#Test for auto correlation
durbinWatsonTest(model)
# ##Test for multicolinearity
car::vif(model)
train <- sample(1:nrow(heart), 0.8*nrow(heart))
head(train)
?sample
source("~/Eedriz Project/eedriz.R")
seed <- sample(c(rep(0, 0.8*nrow(heart)), rep(1, 0.2*nrow(heart))))
table(seed)
nrow(heart)
train <- heart[seed == 0, ]
head(train)
test <- heart[seed == 1, ]
head(test)
source("~/Eedriz Project/eedriz.R")
source("~/Eedriz Project/eedriz.R")
source("~/Eedriz Project/eedriz.R")
#Load all required R packages
library(car)
library(FactoMineR)
library(mlr3verse)
#Import the dataset
heart <- read.csv("~/Eedriz Project/heart.csv", stringsAsFactors = TRUE)
#Perform the summary statistics
summary(heart)
#build a linear model
model = lm(HeartDisease ~ Age + Sex + ChestPainType + RestingBP + Cholesterol + FastingBS + RestingECG + MaxHR + ExerciseAngina + Oldpeak + ST_Slope, heart)
summary(model)
#Test for auto correlation
durbinWatsonTest(model)
# ##Test for multicolinearity
car::vif(model)
#changing the HeartDisease column to factor
heart$HeartDisease <- factor(heart$HeartDisease, levels = c('0', '1'), labels = c("0","1"))
#Create training and test data
seed <- sample(c(rep(0, 0.8*nrow(heart)), rep(1, 0.2*nrow(heart))))
train <- heart[seed == 0, ]
test <- heart[seed == 1, ]
# algorithm selection
task <- TaskClassif$new('Heart disease prediction', data= train, "HeartDisease")
learner <- lrn('classif.rpart')
learner$train(task, train)
source("~/Eedriz Project/eedriz.R")
source("~/Eedriz Project/eedriz.R")
#Import the dataset
heart <- read.csv("~/Eedriz Project/heart.csv", stringsAsFactors = TRUE)
#Perform the summary statistics
summary(heart)
library(caret)
#Import the dataset
heart <- read.csv("~/Eedriz Project/heart.csv", stringsAsFactors = TRUE)
#Perform the summary statistics
summary(heart)
library(caret)
#Import the dataset
heart <- read.csv("~/Eedriz Project/heart.csv", stringsAsFactors = TRUE)
#Perform the summary statistics
summary(heart)
library(caret)
logReg_model <- train(HeartDisease ~ Age + Sex + ChestPainType + RestingBP + Cholesterol + FastingBS + RestingECG + MaxHR + ExerciseAngina + Oldpeak + ST_Slope, data = heart, method = "glm", family = "binomial")
source("~/Eedriz Project/eedriz.R")
#Load all required R packages
library(car)
library(FactoMineR)
library(mlr3verse)
#Import the dataset
heart <- read.csv("~/Eedriz Project/heart.csv", stringsAsFactors = TRUE)
#Perform the summary statistics
summary(heart)
#build a linear model
model = lm(HeartDisease ~ Age + Sex + ChestPainType + RestingBP + Cholesterol + FastingBS + RestingECG + MaxHR + ExerciseAngina + Oldpeak + ST_Slope, heart)
summary(model)
#Test for auto correlation
durbinWatsonTest(model)
# ##Test for multicolinearity
car::vif(model)
#changing the HeartDisease column to factor
heart$HeartDisease <- factor(heart$HeartDisease, levels = c('0', '1'), labels = c("0","1"))
#Create training and test data
#splits <- partition()
seed <- sample(c(rep(0, 0.8*nrow(heart)), rep(1, 0.2*nrow(heart))))
train <- heart[seed == 0, ]
test <- heart[seed == 1, ]
# algorithm selection
task <- TaskClassif$new(id = 'Heart disease prediction', heart, target= "HeartDisease")
learner <- lrn('classif.rpart')
learner$train(task, train)
source("~/Eedriz Project/eedriz.R")
print(task)
task$feature_names
task$feature_types
task$target_names
task$target_type
task$head
task$head()
task$head(3)
task$target
task$truth()
tsk()
tsk(train)
tsk('train')
tsk('iris')
learner$train(task)
learner$model
learner$predict(test)
learner$predict_newdata(test)
learner$predict_type = 'prob'
learner$predict_newdata(test)
source("~/Eedriz Project/eedriz.R")
prediction$score()
prediction$score()
model
summary(model)
source("~/Eedriz Project/eedriz.R")
#Load all required R packages
library(car)
library(FactoMineR)
library(mlr3verse)
#Import the dataset
heart <- read.csv("~/Eedriz Project/heart.csv", stringsAsFactors = TRUE)
#Perform the summary statistics
summary(heart)
#build a linear model
model = lm(HeartDisease ~ Age + Sex + ChestPainType + RestingBP + Cholesterol + FastingBS + RestingECG + MaxHR + ExerciseAngina + Oldpeak + ST_Slope, heart)
summary(model)
#Test for auto correlation
durbinWatsonTest(model)
# ##Test for multicolinearity
car::vif(model)
#changing the HeartDisease column to factor
heart$HeartDisease <- factor(heart$HeartDisease, levels = c('0', '1'), labels = c("0","1"))
#Create training and test data
#splits <- partition()
seed <- sample(c(rep(0, 0.8*nrow(heart)), rep(1, 0.2*nrow(heart))))
train <- heart[seed == 0, ]
test <- heart[seed == 1, ]
# algorithm selection
task <- TaskClassif$new(id = 'Heart disease prediction', backend= train, target= "HeartDisease")
# learner <- lrn('classif.rpart')
# learner$train(task)
# model <- learner$model
# prediction <- learner$predict_newdata(test)
mlr_learners$get("classif.log_reg")
learner <- LearnerClassifLogReg$new()
source("~/Eedriz Project/eedriz.R")
source("~/Eedriz Project/eedriz.R")
source("~/Eedriz Project/eedriz.R")
source("~/Eedriz Project/eedriz.R")
#Load all required R packages
# library(car)
library(FactoMineR)
library(mlr3)
#Import the dataset
heart <- read.csv("~/Eedriz Project/heart.csv", stringsAsFactors = TRUE)
#Perform the summary statistics
summary(heart)
#build a linear model
model = lm(HeartDisease ~ Age + Sex + ChestPainType + RestingBP + Cholesterol + FastingBS + RestingECG + MaxHR + ExerciseAngina + Oldpeak + ST_Slope, heart)
summary(model)
#Test for auto correlation
durbinWatsonTest(model)
# ##Test for multicolinearity
car::vif(model)
#changing the HeartDisease column to factor
heart$HeartDisease <- factor(heart$HeartDisease, levels = c('0', '1'), labels = c("0","1"))
#Create training and test data
#splits <- partition()
seed <- sample(c(rep(0, 0.8*nrow(heart)), rep(1, 0.2*nrow(heart))))
train <- heart[seed == 0, ]
test <- heart[seed == 1, ]
# algorithm selection
task <- TaskClassif$new(id = 'Heart disease prediction', backend= train, target= "HeartDisease")
# learner <- lrn('classif.rpart')
# learner$train(task)
# model <- learner$model
# prediction <- learner$predict_newdata(test)
mlr_learners$get("classif.log_reg")
learner <- LearnerClassifLogReg$new()
source("~/Eedriz Project/eedriz.R")
remove.packages(mlr3verse)
library(mlr3verse)
remove.packages("mlr3verse", lib="~/Eedriz Project/renv/library/R-4.1/x86_64-w64-mingw32")
remove.packages("mlr3", lib="~/Eedriz Project/renv/library/R-4.1/x86_64-w64-mingw32")
remove.packages("mlr3cluster", lib="~/Eedriz Project/renv/library/R-4.1/x86_64-w64-mingw32")
remove.packages("mlr3viz", lib="~/Eedriz Project/renv/library/R-4.1/x86_64-w64-mingw32")
remove.packages("mlr3pipelines", lib="~/Eedriz Project/renv/library/R-4.1/x86_64-w64-mingw32")
remove.packages("mlr3tuning", lib="~/Eedriz Project/renv/library/R-4.1/x86_64-w64-mingw32")
remove.packages("mlr3tuningspaces", lib="~/Eedriz Project/renv/library/R-4.1/x86_64-w64-mingw32")
remove.packages("mlr3filters", lib="~/Eedriz Project/renv/library/R-4.1/x86_64-w64-mingw32")
remove.packages("mlr3fselect", lib="~/Eedriz Project/renv/library/R-4.1/x86_64-w64-mingw32")
remove.packages("mlr3hyperband", lib="~/Eedriz Project/renv/library/R-4.1/x86_64-w64-mingw32")
remove.packages("mlr3learners", lib="~/Eedriz Project/renv/library/R-4.1/x86_64-w64-mingw32")
remove.packages("mlr3measures", lib="~/Eedriz Project/renv/library/R-4.1/x86_64-w64-mingw32")
remove.packages("mlr3misc", lib="~/Eedriz Project/renv/library/R-4.1/x86_64-w64-mingw32")
remove.packages("mlr3data", lib="~/Eedriz Project/renv/library/R-4.1/x86_64-w64-mingw32")
source("~/Eedriz Project/eedriz.R")
source("~/Eedriz Project/eedriz.R")
#Load all required R packages
# library(car)
library(FactoMineR)
library(mlr3verse)
#Import the dataset
heart <- read.csv("~/Eedriz Project/heart.csv", stringsAsFactors = TRUE)
#Perform the summary statistics
summary(heart)
#build a linear model
model = lm(HeartDisease ~ Age + Sex + ChestPainType + RestingBP + Cholesterol + FastingBS + RestingECG + MaxHR + ExerciseAngina + Oldpeak + ST_Slope, heart)
summary(model)
#Test for auto correlation
durbinWatsonTest(model)
# ##Test for multicolinearity
car::vif(model)
#changing the HeartDisease column to factor
heart$HeartDisease <- factor(heart$HeartDisease, levels = c('0', '1'), labels = c("0","1"))
#Create training and test data
#splits <- partition()
seed <- sample(c(rep(0, 0.8*nrow(heart)), rep(1, 0.2*nrow(heart))))
train <- heart[seed == 0, ]
test <- heart[seed == 1, ]
# algorithm selection
task <- TaskClassif$new(id = 'Heart disease prediction', backend= train, target= "HeartDisease")
# learner <- lrn('classif.rpart')
# learner$train(task)
# model <- learner$model
# prediction <- learner$predict_newdata(test)
mlr_learners$get("classif.log_reg")
learner <- LearnerClassifLogReg$new()
#Load all required R packages
# library(car)
library(FactoMineR)
library(mlr3verse)
#Import the dataset
heart <- read.csv("~/Eedriz Project/heart.csv", stringsAsFactors = TRUE)
#Perform the summary statistics
summary(heart)
#build a linear model
model = lm(HeartDisease ~ Age + Sex + ChestPainType + RestingBP + Cholesterol + FastingBS + RestingECG + MaxHR + ExerciseAngina + Oldpeak + ST_Slope, heart)
summary(model)
#Test for auto correlation
durbinWatsonTest(model)
# ##Test for multicolinearity
car::vif(model)
#changing the HeartDisease column to factor
heart$HeartDisease <- factor(heart$HeartDisease, levels = c('0', '1'), labels = c("0","1"))
#Create training and test data
#splits <- partition()
seed <- sample(c(rep(0, 0.8*nrow(heart)), rep(1, 0.2*nrow(heart))))
train <- heart[seed == 0, ]
test <- heart[seed == 1, ]
# algorithm selection
task <- TaskClassif$new(id = 'Heart disease prediction', backend= train, target= "HeartDisease")
# learner <- lrn('classif.rpart')
# learner$train(task)
# model <- learner$model
# prediction <- learner$predict_newdata(test)
mlr_learners$get("classif.log_reg")
learner <- LearnerClassifLogReg$new()
install.packages("mlr3verse")
#Load all required R packages
# library(car)
library(FactoMineR)
library(mlr3verse)
#Import the dataset
heart <- read.csv("~/Eedriz Project/heart.csv", stringsAsFactors = TRUE)
#Perform the summary statistics
summary(heart)
#build a linear model
model = lm(HeartDisease ~ Age + Sex + ChestPainType + RestingBP + Cholesterol + FastingBS + RestingECG + MaxHR + ExerciseAngina + Oldpeak + ST_Slope, heart)
summary(model)
#Test for auto correlation
durbinWatsonTest(model)
# ##Test for multicolinearity
car::vif(model)
#changing the HeartDisease column to factor
heart$HeartDisease <- factor(heart$HeartDisease, levels = c('0', '1'), labels = c("0","1"))
#Create training and test data
#splits <- partition()
seed <- sample(c(rep(0, 0.8*nrow(heart)), rep(1, 0.2*nrow(heart))))
train <- heart[seed == 0, ]
test <- heart[seed == 1, ]
# algorithm selection
task <- TaskClassif$new(id = 'Heart disease prediction', backend= train, target= "HeartDisease")
# learner <- lrn('classif.rpart')
# learner$train(task)
# model <- learner$model
# prediction <- learner$predict_newdata(test)
mlr_learners$get("classif.log_reg")
learner <- LearnerClassifLogReg$new()
library(mlr3learners)
source("~/Eedriz Project/eedriz.R")
source("~/Eedriz Project/eedriz.R")
#Load all required R packages
library(car)
library(FactoMineR)
library(mlr3verse)
library(mlr3learners)
#Import the dataset
heart <- read.csv("~/Eedriz Project/heart.csv", stringsAsFactors = TRUE)
#Perform the summary statistics
summary(heart)
#build a linear model
model = lm(HeartDisease ~ Age + Sex + ChestPainType + RestingBP + Cholesterol + FastingBS + RestingECG + MaxHR + ExerciseAngina + Oldpeak + ST_Slope, heart)
summary(model)
#Test for auto correlation
durbinWatsonTest(model)
# ##Test for multicolinearity
car::vif(model)
#changing the HeartDisease column to factor
heart$HeartDisease <- factor(heart$HeartDisease, levels = c('0', '1'), labels = c("0","1"))
#Create training and test data
#splits <- partition()
seed <- sample(c(rep(0, 0.8*nrow(heart)), rep(1, 0.2*nrow(heart))))
train <- heart[seed == 0, ]
test <- heart[seed == 1, ]
# algorithm selection
task <- TaskClassif$new(id = 'Heart disease prediction', backend= train, target= "HeartDisease")
# learner <- lrn('classif.rpart')
# learner$train(task)
# model <- learner$model
# prediction <- learner$predict_newdata(test)
mlr_learners$get("classif.log_reg")
learner <- LearnerClassifLogReg$new()
model <- learner$fit(task)
source("~/Eedriz Project/eedriz.R")
source("~/Eedriz Project/eedriz.R")
#Load all required R packages
library(car)
library(FactoMineR)
library(mlr3verse)
library(mlr3learners)
library(mlr3pipelines)
#Import the dataset
heart <- read.csv("~/Eedriz Project/heart.csv", stringsAsFactors = TRUE)
#Perform the summary statistics
summary(heart)
#build a linear model
model = lm(HeartDisease ~ Age + Sex + ChestPainType + RestingBP + Cholesterol + FastingBS + RestingECG + MaxHR + ExerciseAngina + Oldpeak + ST_Slope, heart)
summary(model)
#Test for auto correlation
durbinWatsonTest(model)
# ##Test for multicolinearity
car::vif(model)
#changing the HeartDisease column to factor
heart$HeartDisease <- factor(heart$HeartDisease, levels = c('0', '1'), labels = c("0","1"))
#Create training and test data
#splits <- partition()
seed <- sample(c(rep(0, 0.8*nrow(heart)), rep(1, 0.2*nrow(heart))))
train <- heart[seed == 0, ]
test <- heart[seed == 1, ]
# algorithm selection
task <- TaskClassif$new(id = 'Heart disease prediction', backend= train, target= "HeartDisease")
# learner <- lrn('classif.rpart')
# learner$train(task)
# model <- learner$model
# prediction <- learner$predict_newdata(test)
mlr_learners$get("classif.log_reg")
learner <- LearnerClassifLogReg$new()
model <- learner$train(task)
my.prediction <- model$predict_newdata(test)
perf <- performance(my.prediction, Measure= list(cm))
perf <- performance(my.prediction, Measure= list(msr("classif.cm")))
task$learner$model
learner$model
learner$predict(test)
learner$predict_newdata(test)
#Load all required R packages
library(car)
library(FactoMineR)
library(mlr3verse)
library(mlr3learners)
library(mlr3pipelines)
#Import the dataset
heart <- read.csv("~/Eedriz Project/heart.csv", stringsAsFactors = TRUE)
#Perform the summary statistics
summary(heart)
#build a linear model
model = lm(HeartDisease ~ Age + Sex + ChestPainType + RestingBP + Cholesterol + FastingBS + RestingECG + MaxHR + ExerciseAngina + Oldpeak + ST_Slope, heart)
summary(model)
#Test for auto correlation
durbinWatsonTest(model)
# ##Test for multicolinearity
car::vif(model)
#changing the HeartDisease column to factor
heart$HeartDisease <- factor(heart$HeartDisease, levels = c('0', '1'), labels = c("0","1"))
#Create training and test data
#splits <- partition()
seed <- sample(c(rep(0, 0.8*nrow(heart)), rep(1, 0.2*nrow(heart))))
train <- heart[seed == 0, ]
test <- heart[seed == 1, ]
# algorithm selection
task <- TaskClassif$new(id = 'Heart disease prediction', backend= train, target= "HeartDisease")
# learner <- lrn('classif.rpart')
# learner$train(task)
# model <- learner$model
# prediction <- learner$predict_newdata(test)
mlr_learners$get("classif.log_reg")
learner <- LearnerClassifLogReg$new()
model <- learner$train(task)
prediction <- model$predict_newdata(test)
prediction$score
perf <- performance(my.prediction, Measure= list(msr("classif.cm")))
prediction$score()
learner$model
source("~/Eedriz Project/eedriz.R")
prediction$score()
prediction
prediction$confusion
source("~/Eedriz Project/eedriz.R")
